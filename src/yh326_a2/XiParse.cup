// A stub for a Xi CUP specification.

package yh326_a2;

// You might want to add types to these declarations.

terminal IDENTIFIER;
terminal USE, IF, WHILE, ELSE, RETURN, LENGTH, INT, BOOL, BOOLEAN, INTEGER;
// separator () {} []
terminal OPEN_BRACKET, CLOSE_BRACKET, OPEN_PAREN, CLOSE_PAREN, OPEN_BRACE, CLOSE_BRACE;
terminal COMMA, SEMICOLON, COLON;

// operator
terminal ASSIGN;
terminal INTEGER_NEGATION, BOOLEAN_NEGATION;
terminal MULTIPLICATION, HIGH_MULTI, DIVISION, REMAINDER;
terminal ADDITION, SUBTRACTION;
terminal LT, LEQ, GEQ, GT;
terminal EQUAL, NOT_EQUAL;
terminal LOGICAL_AND;
terminal LOGICAL_OR;

// You might want to add types to these declarations.
nonterminal program, use, methods, method, decls, block, typeid, typeids;
nonterminal decl, stmts, stmt, assignment, if_stmt, while_stmt;
nonterminal ret_stmt, proc_stmt, block_stmts, decl_stmt;
nonterminal expr, bool_expr, int_expr, bool_operator, int_operator, expr_list;
//nonterminal else_stmt;

start with program;
// Recognizes "Hello World!", but not much else.
//program ::= USE IDENTIFIER IDENTIFIER OPEN_PAREN IDENTIFIER COLON
//  INT OPEN_BRACKET CLOSE_BRACKET OPEN_BRACKET CLOSE_BRACKET CLOSE_PAREN
//  OPEN_BRACE IDENTIFIER OPEN_PAREN STRING_LITERAL CLOSE_PAREN CLOSE_BRACE;
program ::= use methods;

use ::= USE IDENTIFIER;

methods ::= method | method methods;

method ::= IDENTIFIER OPEN_PAREN decls CLOSE_PAREN block
           |
           IDENTIFIER OPEN_PAREN decls CLOSE_PAREN COLON typeids block;

typeid ::= INT | BOOL | typeid OPEN_BRACKET CLOSE_BRACKET;
typeids ::= |
          typeid COMMA typeids;

decl ::= IDENTIFIER COLON typeid;
decls ::= |
          decl COMMA decls;

block ::= OPEN_BRACE stmts CLOSE_BRACE;

stmts ::= |
          stmt stmts;

stmt ::= assignment
         |
         if_stmt
         |
         while_stmt
         |
         ret_stmt
         |
         proc_stmt
         |
         block_stmts
         |
         decl_stmt;

assignment ::= IDENTIFIER ASSIGN expr;


expr ::= bool_expr
         |
         int_expr;

bool_expr ::= |
              BOOLEAN
              |
              BOOLEAN_NEGATION bool_expr
              |
              bool_expr bool_operator bool_expr
	      |
              OPEN_PAREN bool_expr CLOSE_PAREN;

int_expr ::= |
             INTEGER
  	     |
             INTEGER_NEGATION int_expr
             |
             int_expr int_operator int_expr
             |
             OPEN_PAREN int_expr CLOSE_PAREN;

bool_operator ::= LOGICAL_AND
                  |
                  LOGICAL_OR
                  |
                  EQUAL
                  |
                  NOT_EQUAL;

int_operator ::= MULTIPLICATION
                 |
                 HIGH_MULTI
                 |
                 DIVISION
                 |
                 REMAINDER; 


if_stmt ::= IF expr block 
            |
            IF expr stmt;

while_stmt ::= WHILE expr block 
               |
               WHILE expr stmt;

ret_stmt ::= RETURN expr_list;
expr_list ::= |
              expr COMMA expr_list;

proc_stmt ::= IDENTIFIER OPEN_BRACKET expr_list CLOSE_BRACKET;
block_stmts ::= block;
decl_stmt ::= IDENTIFIER COLON typeid
              |
              IDENTIFIER COLON typeid ASSIGN expr_list;
             

