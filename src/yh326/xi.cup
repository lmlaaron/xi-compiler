// A stub for a Xi CUP specification.

package yh326;

// You might want to add types to these declarations.
terminal String IDENTIFIER;
terminal String STRING_LITERAL;
terminal Character CHARACTER_LITERAL;
terminal UnsignedLong INTEGER_LITERAL;
terminal TRUE, FALSE;
terminal INT, BOOL;

terminal IF, ELSE, WHILE, BREAK, RETURN, USE, LENGTH, PLUS, MINUS, TIMES,
  DIVIDE, MODULO, NOT, LT, LEQ, GT, GEQ, AND, OR, EQUAL, NOT_EQUAL, GETS,
  OPEN_BRACKET, CLOSE_BRACKET, OPEN_PAREN, CLOSE_PAREN, OPEN_BRACE, CLOSE_BRACE,
  COLON, COMMA, SEMICOLON, UNDERSCORE;

terminal TIMES_SHIFT, ERROR;

// You might want to add types to these declarations.
nonterminal Node program, use_list, use, method_list, method;


start with program;

// Recognizes "Hello World!", but not much else.
/*program ::= USE IDENTIFIER IDENTIFIER OPEN_PAREN IDENTIFIER COLON
  INT OPEN_BRACKET CLOSE_BRACKET OPEN_BRACKET CLOSE_BRACKET CLOSE_PAREN
  OPEN_BRACE IDENTIFIER OPEN_PAREN STRING_LITERAL CLOSE_PAREN CLOSE_BRACE;*/


program   ::= use_list:ul method_list:ml
              {: Node.write(new Node(ul, ml)); :};
              //{: System.out.println(); :};
use_list  ::= use_list:ul use:u
              {: ul.addNode(u); RESULT = ul; :}
            | use:u
              {: RESULT = new Node(u); :};

use       ::= USE IDENTIFIER:id
            {: RESULT = new Node(new Node("use"), new Node(id)); :};

method_list ::= method_list:ml method:m
                {: ml.addNode(m); RESULT = ml; :}
              | method:m
                {: RESULT = m; :};

// Not implemented ..... TODO
method  ::= UNDERSCORE
            {: RESULT = new Node("___________________________________________________________________"); :};
