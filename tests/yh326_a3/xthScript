# xth test script
#
# This file is a test script for xth (xic Test Harness).  It
# conforms to the following grammar:
#
#   ScriptFile      ::= Commands+
#   Command         ::= build
#                     | CompilerTest
#   CompilerTest    ::= TestKind (\(TestName\))? ([TestPath])? ("CmdLineArgs")?
#                           { (FileTest;)* }
#   TestKind        ::= xic
#   TestName        ::= LitString
#   FileTest        ::= Filenames Description? FailureSet?
#   Filenames       ::= Filename+
#   Description     ::= LitString
#   FailureSet      ::= Failure (, Failure)*
#   Failure         ::= \( ErrorKind \)
#                     | \( ErrorKind, LitString \)
#
#   TestPath        :   the path to the test files, enclosed in quotes,
#                       relative to the path given in xth's -testpath flag.
#   CmdLineArgs     :   command-line arguments for xic
#   Filename        :   the name of a file, interpreted from TestPath.
#   LitString       :   a literal string, enclosed in quotes.
#   ErrorKind       :   one of, or a unique prefix of one of the following
#                       strings: "Lexical Error", "Syntax Error", or
#                       "Semantic Error".
#
# xth runs the commands in order of appearance.

# build compiler first
build

xic ("Test --typecheck") "-libpath $(testpath) --typecheck" {
00Decl.xi;
01DeclAssign.xi;
02Arithmetic.xi;
03VariableArithmetic.xi;
04BoolOps.xi;
05ArrayConstruct.xi;
06ArrayIndex.xi;
07ArrayConcat.xi;
08FuncCall.xi;
arithmetic02.xi;
arithmetic03.xi;
arithmetic04.xi;
arithmetic05.xi;
arithmetic06.xi;
assign01.xi;
assign02.xi;
assign03.xi;
assign04.xi;
assign05.xi;
assign06.xi;
assign07.xi;
assign08.xi;
assign09.xi;
comparison02.xi;
comparison03.xi;
comparison04.xi;
comparison05.xi;
comparison06.xi;
comparison07.xi;
comparison08.xi;
comparison09.xi;
comparison10.xi;
comparison11.xi;
comparison12.xi;
comparison13.xi;
comparison14.xi;
comparison15.xi;
comparison16.xi;
comparison17.xi;
comparison18.xi;
if01.xi;
if02.xi;
if03.xi;
if04.xi;
if05.xi;
if06.xi;
if07.xi;
ifelse01.xi;
ifelse02.xi;
ifelse03.xi;
methodcall01.xi;
methodcall02.xi;
methodcall03.xi;
methodcall04.xi;
methodcall05.xi;
methodcall06.xi;
methodcall07.xi;
methodcall08.xi;
methodcall09.xi;
methodcall10.xi;
multiassign01.xi;
multiassign02.xi;
multiassign03.xi;
multiassign04.xi;
prog01.xi;
return01.xi;
return02.xi;
return03.xi;
return04.xi;
return05.xi;
return06.xi;
return07.xi;
return08.xi;
return09.xi;
return10.xi;
return11.xi;
return12.xi;
stmt01.xi;
stmt02.xi;
stmt03.xi;
stmt04.xi;
toplevel1.xi;
toplevel2.xi;
toplevel3.xi;
toplevel4.xi;
toplevel5.xi;
toplevel6.xi;
toplevel7.xi;
use1.xi;
use2.xi;
use3.xi;
use4.xi;
use5.xi;
use6.xi;
vardecl01.xi;
vardecl02.xi;
vardecl03.xi;
vardecl04.xi;
vardecl05.xi;
vardecl06.xi;
vardecl07.xi;
vardecl08.xi;
vardecl09.xi;
vardecl10.xi;
vardecl11.xi;
vardecl12.xi;
vardecl13.xi;
vardecl14.xi;
vardecl15.xi;
varinit01.xi;
varinit02.xi;
varinit03.xi;
varinit04.xi;
varinit05.xi;
while1.xi;
while2.xi;
while3.xi;
while4.xi;
}
